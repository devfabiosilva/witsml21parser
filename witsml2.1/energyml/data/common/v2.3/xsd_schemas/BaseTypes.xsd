<?xml version="1.0" encoding="utf-8"?>
<xs:schema targetNamespace="http://www.energistics.org/energyml/data/commonv2" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:eml="http://www.energistics.org/energyml/data/commonv2" elementFormDefault="qualified" version="2.3" attributeFormDefault="unqualified">
	<!--														-->
	<!-- Energistics License Agreement
			This file is distributed under the Energistics Product License Agreement at
			http://www.energistics.org/product-license-agreement
			Use of this file constitutes agreement with the Energistics Product License Agreement.
			Copyright (c) 2021 Energistics. All rights reserved.
			Energistics, WITSML, PRODML and RESQML are trademarks or registered trademarks of Energistics.
			-->
	<!--														-->
	<xs:annotation>
		<xs:documentation>The BaseTypes package contains the common re-usable structures and types commonly used by EnergyML Schemas.
These types are specializations of normal XML schema datatypes with special purposes, for example, specific maximum lengths for string types. They provide consistency and protect consumers of the standard documents from potentially unlimited-length strings appearing in documents. </xs:documentation>
	</xs:annotation>
	<!--														-->
	<xs:include schemaLocation="CommonEnumerations.xsd"/>
	<xs:include schemaLocation="Datum.xsd"/>
	<xs:include schemaLocation="CRS.xsd"/>
	<xs:include schemaLocation="ObjectReference.xsd"/>
	<xs:include schemaLocation="QuantityClass.xsd"/>
	<xs:include schemaLocation="MeasureType.xsd"/>
	<xs:include schemaLocation="ValueTypes.xsd"/>
	<xs:simpleType name="AbstractMeasure">
		<xs:annotation>
			<xs:documentation>The intended abstract supertype of all quantities that have a value with a unit of measure. The unit of measure is in the uom attribute of the subtypes. 

This type allows all quantities to be profiled to be a 'float' instead of a 'double'.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:double"/>
	</xs:simpleType>
	<xs:simpleType name="AbstractString">
		<xs:annotation>
			<xs:documentation>The intended abstract supertype of all strings. This abstract type allows the control over whitespace for all strings to be defined at a high level. This type should not be used directly except to derive another type.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="xs:string"/>
	</xs:simpleType>
	<xs:simpleType name="BooleanXmlArrayList">
		<xs:list itemType="xs:boolean"/>
	</xs:simpleType>
	<xs:simpleType name="EnumExtensionPattern">
		<xs:restriction base="eml:AbstractString">
			<xs:pattern value=".*:.*"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="FloatingPointType">
		<xs:restriction base="eml:TypeEnum">
			<xs:enumeration value="arrayOfFloat32LE"/>
			<xs:enumeration value="arrayOfDouble64LE"/>
			<xs:enumeration value="arrayOfFloat32BE"/>
			<xs:enumeration value="arrayOfDouble64BE"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="FloatingPointXmlArrayList">
		<xs:list itemType="xs:double"/>
	</xs:simpleType>
	<xs:simpleType name="IntegerType">
		<xs:restriction base="eml:TypeEnum">
			<xs:enumeration value="arrayOfInt8"/>
			<xs:enumeration value="arrayOfUInt8"/>
			<xs:enumeration value="arrayOfInt16LE"/>
			<xs:enumeration value="arrayOfInt32LE"/>
			<xs:enumeration value="arrayOfInt64LE"/>
			<xs:enumeration value="arrayOfUInt16LE"/>
			<xs:enumeration value="arrayOfUInt32LE"/>
			<xs:enumeration value="arrayOfUInt64LE"/>
			<xs:enumeration value="arrayOfInt16BE"/>
			<xs:enumeration value="arrayOfInt32BE"/>
			<xs:enumeration value="arrayOfInt64BE"/>
			<xs:enumeration value="arrayOfUInt16BE"/>
			<xs:enumeration value="arrayOfUInt32BE"/>
			<xs:enumeration value="arrayOfUInt64BE"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="IntegerXmlArrayList">
		<xs:list itemType="xs:long"/>
	</xs:simpleType>
	<xs:simpleType name="NonNegativeLong">
		<xs:restriction base="xs:long">
			<xs:minInclusive value="0"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="PositiveDouble">
		<xs:restriction base="xs:double">
			<xs:minExclusive value="0"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="PositiveLong">
		<xs:restriction base="xs:long">
			<xs:minInclusive value="1"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="QualifiedType">
		<xs:restriction base="eml:String256">
			<xs:pattern value="(witsml|resqml|prodml|eml|custom)[1-9]\d\.\w+"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="String2000">
		<xs:restriction base="eml:AbstractString">
			<xs:maxLength value="2000"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="String256">
		<xs:restriction base="eml:AbstractString">
			<xs:maxLength value="256"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="String64">
		<xs:restriction base="eml:AbstractString">
			<xs:maxLength value="64"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="TimeStamp">
		<xs:restriction base="xs:dateTime">
			<xs:pattern value=".+T.+[Z+\-].*"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="TimeZone">
		<xs:annotation>
			<xs:documentation>A time zone conforming to the XSD:dateTime specification.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="eml:String64">
			<xs:pattern value="[Z]|([\-+](([01][0-9])|(2[0-3])):[0-5][0-9])"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="TypeEnum">
		<xs:annotation>
			<xs:documentation>The intended abstract supertype of all enumerated "types". This abstract type allows the maximum length of a type enumeration to be centrally defined. This type should not be used directly except to derive another type. It should also be used for uncontrolled strings which are candidates to become enumerations at a future date.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="eml:String64"/>
	</xs:simpleType>
	<xs:simpleType name="UomEnum">
		<xs:annotation>
			<xs:documentation>The intended supertype of all "units of measure".
This abstract type allows the maximum length of a UOM enumeration to be centrally defined. 
This type is abstract in the sense that it should not be used directly except to derive another type.</xs:documentation>
		</xs:annotation>
		<xs:restriction base="eml:AbstractString">
			<xs:maxLength value="32"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:simpleType name="UuidString">
		<xs:restriction base="eml:AbstractString">
			<xs:pattern value="[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"/>
		</xs:restriction>
	</xs:simpleType>
	<xs:complexType name="AbsolutePressureInterval">
		<xs:complexContent>
			<xs:extension base="eml:AbstractPressureInterval">
				<xs:sequence>
					<xs:element name="MinPressure" type="eml:AbsolutePressure" minOccurs="1" maxOccurs="1"/>
					<xs:element name="MaxPressure" type="eml:AbsolutePressure" minOccurs="1" maxOccurs="1"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="AbstractBooleanArray" abstract="true">
		<xs:annotation>
			<xs:documentation>Generic representation of an array of Boolean values. Each derived element provides a specialized implementation to allow specific optimization of the representation. </xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="eml:AbstractValueArray">
				<xs:sequence>
					<xs:element name="Statistics" type="eml:BooleanArrayStatistics" minOccurs="0" maxOccurs="unbounded"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="AbstractElevation" abstract="true">
		<xs:sequence>
			<xs:element name="Elevation" type="eml:LengthMeasureExt" minOccurs="1" maxOccurs="1"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="AbstractFloatingPointArray" abstract="true">
		<xs:annotation>
			<xs:documentation>Generic representation of an array of double values. Each derived element provides specialized implementation to allow specific optimization of the representation.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="eml:AbstractNumericArray">
				<xs:sequence>
					<xs:element name="Statistics" type="eml:FloatingPointArrayStatistics" minOccurs="0" maxOccurs="unbounded"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="AbstractIntegerArray" abstract="true">
		<xs:annotation>
			<xs:documentation>Generic representation of an array of integer values. Each derived element provides specialized implementation to allow specific optimization of the representation.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="eml:AbstractNumericArray">
				<xs:sequence>
					<xs:element name="Statistics" type="eml:IntegerArrayStatistics" minOccurs="0" maxOccurs="unbounded"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="AbstractInterval" abstract="true">
		<xs:annotation>
			<xs:documentation>Generic representation of a value interval.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Comment" type="eml:String2000" minOccurs="0" maxOccurs="1">
				<xs:annotation>
					<xs:documentation>A descriptive remark about the interval.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="AbstractNumericArray" abstract="true">
		<xs:complexContent>
			<xs:extension base="eml:AbstractValueArray">
				<xs:sequence/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="AbstractPressureInterval" abstract="true">
		<xs:complexContent>
			<xs:extension base="eml:AbstractInterval">
				<xs:sequence/>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="AbstractStringArray" abstract="true">
		<xs:complexContent>
			<xs:extension base="eml:AbstractValueArray">
				<xs:sequence>
					<xs:element name="Statistics" type="eml:StringArrayStatistics" minOccurs="0" maxOccurs="unbounded"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="AbstractTvdInterval" abstract="true">
		<xs:complexContent>
			<xs:extension base="eml:AbstractInterval">
				<xs:sequence>
					<xs:element name="TvdMin" type="xs:double" minOccurs="1" maxOccurs="1">
						<xs:annotation>
							<xs:documentation>The minimum true vertical depth value.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="TvdMax" type="xs:double" minOccurs="1" maxOccurs="1">
						<xs:annotation>
							<xs:documentation>The maximum true vertical depth value.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="Uom" type="eml:LengthUomExt" minOccurs="1" maxOccurs="1"/>
					<xs:element name="Trajectory" type="eml:DataObjectReference" minOccurs="0" maxOccurs="1"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="AbstractValueArray" abstract="true">
		<xs:annotation>
			<xs:documentation>Generic representation of an array of numeric, Boolean, and string values. Each derived element provides specialized implementation for specific content types or for optimization of the representation.</xs:documentation>
		</xs:annotation>
		<xs:sequence/>
	</xs:complexType>
	<xs:complexType name="AbstractVerticalDepth" abstract="true">
		<xs:annotation>
			<xs:documentation>A vertical (gravity-based) depth coordinate within the context of a well. Positive moving downward from the reference datum. All coordinates with the same datum (and same UOM) can be considered to be in the same coordinate reference system (CRS) and are thus directly comparable.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="VerticalDepth" type="eml:LengthMeasureExt" minOccurs="1" maxOccurs="1"/>
			<xs:element name="Trajectory" type="eml:DataObjectReference" minOccurs="0" maxOccurs="1"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="AuthorityQualifiedName">
		<xs:simpleContent>
			<xs:extension base="eml:String64">
				<xs:attribute name="authority" use="required" type="eml:String64"/>
				<xs:attribute name="code" use="optional" type="eml:String64"/>
			</xs:extension>
		</xs:simpleContent>
	</xs:complexType>
	<xs:complexType name="BooleanArrayFromIndexArray">
		<xs:annotation>
			<xs:documentation>An array of Boolean values defined by specifying explicitly which indices in the array are either true or false. This class is used to represent very sparse true or false data.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="eml:AbstractBooleanArray">
				<xs:sequence>
					<xs:element name="Count" type="eml:PositiveLong" minOccurs="1" maxOccurs="1">
						<xs:annotation>
							<xs:documentation>Total number of Boolean elements in the array. This number is different from the number of indices used to represent the array.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="Indices" type="eml:AbstractIntegerArray" minOccurs="1" maxOccurs="1">
						<xs:annotation>
							<xs:documentation>Array of integer indices.

BUSINESS RULE: Must be non-negative.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="IndexIsTrue" type="xs:boolean" minOccurs="1" maxOccurs="1">
						<xs:annotation>
							<xs:documentation>Indicates whether the specified elements are true or false.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="CountPerValue" type="xs:long" minOccurs="1" maxOccurs="1" default="1"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="BooleanArrayStatistics">
		<xs:sequence>
			<xs:element name="ModePercentage" type="xs:double" minOccurs="0" maxOccurs="1"/>
			<xs:element name="ValuesMode" type="xs:boolean" minOccurs="0" maxOccurs="1"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="BooleanConstantArray">
		<xs:annotation>
			<xs:documentation>Represents an array of Boolean values where all values are identical. This an optimization for which an array of explicit Boolean values is not required. </xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="eml:AbstractBooleanArray">
				<xs:sequence>
					<xs:element name="Value" type="xs:boolean" minOccurs="1" maxOccurs="1">
						<xs:annotation>
							<xs:documentation>Value inside all the elements of the array.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="Count" type="eml:PositiveLong" minOccurs="1" maxOccurs="1">
						<xs:annotation>
							<xs:documentation>Size of the array.</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="BooleanExternalArray">
		<xs:annotation>
			<xs:documentation>Array of Boolean values provided explicitly by an HDF5 dataset.

This text needs to be altered to say that nulls are not allowed in the underlying implementation</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="eml:AbstractBooleanArray">
				<xs:sequence>
					<xs:element name="CountPerValue" type="xs:long" minOccurs="1" maxOccurs="1" default="1"/>
					<xs:element name="Values" type="eml:ExternalDataArray" minOccurs="1" maxOccurs="1">
						<xs:annotation>
							<xs:documentation>Reference to an HDF5 array of values.</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="BooleanXmlArray">
		<xs:complexContent>
			<xs:extension base="eml:AbstractBooleanArray">
				<xs:sequence>
					<xs:element name="CountPerValue" type="xs:long" minOccurs="1" maxOccurs="1" default="1"/>
					<xs:element name="Values" type="eml:BooleanXmlArrayList" minOccurs="1" maxOccurs="1"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="Cost">
		<xs:annotation>
			<xs:documentation>The price of an item, with a currency indication.</xs:documentation>
		</xs:annotation>
		<xs:simpleContent>
			<xs:extension base="eml:AbstractMeasure">
				<xs:attribute name="currency" use="required" type="eml:String64">
					<xs:annotation>
						<xs:documentation>Currency used for this Cost. Use of ISO 4217 alphabetic codes for transfers would be a best practice.</xs:documentation>
					</xs:annotation>
				</xs:attribute>
			</xs:extension>
		</xs:simpleContent>
	</xs:complexType>
	<xs:complexType name="DateTimeInterval">
		<xs:complexContent>
			<xs:extension base="eml:AbstractInterval">
				<xs:sequence>
					<xs:element name="StartTime" type="eml:TimeStamp" minOccurs="1" maxOccurs="1"/>
					<xs:element name="EndTime" type="eml:TimeStamp" minOccurs="1" maxOccurs="1"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="DatumElevation">
		<xs:complexContent>
			<xs:extension base="eml:AbstractElevation">
				<xs:sequence>
					<xs:element name="Datum" type="eml:DataObjectReference" minOccurs="1" maxOccurs="1">
						<xs:annotation>
							<xs:documentation>The datum the elevation is referenced to.</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="DatumTvdInterval">
		<xs:complexContent>
			<xs:extension base="eml:AbstractTvdInterval">
				<xs:sequence>
					<xs:element name="Datum" type="eml:DataObjectReference" minOccurs="0" maxOccurs="1">
						<xs:annotation>
							<xs:documentation>The datum the TVD interval is referenced to. Required when there is no default TVD datum associated with the data object this is used in.</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="DatumVerticalDepth">
		<xs:complexContent>
			<xs:extension base="eml:AbstractVerticalDepth">
				<xs:sequence>
					<xs:element name="Datum" type="eml:DataObjectReference" minOccurs="0" maxOccurs="1">
						<xs:annotation>
							<xs:documentation>The datum the vertical depth is referenced to. Required when there is no default TVD datum associated with the data object this is used in.</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="ElapsedTimeInterval">
		<xs:complexContent>
			<xs:extension base="eml:AbstractInterval">
				<xs:sequence>
					<xs:element name="StartElapsedTime" type="eml:TimeMeasure" minOccurs="1" maxOccurs="1"/>
					<xs:element name="EndElapsedTime" type="eml:TimeMeasure" minOccurs="1" maxOccurs="1"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="FloatingPointArrayStatistics">
		<xs:sequence>
			<xs:element name="ValidValueCount" type="xs:long" minOccurs="0" maxOccurs="1"/>
			<xs:element name="MinimumValue" type="xs:double" minOccurs="0" maxOccurs="1"/>
			<xs:element name="MaximumValue" type="xs:double" minOccurs="0" maxOccurs="1"/>
			<xs:element name="ValuesMean" type="xs:double" minOccurs="0" maxOccurs="1"/>
			<xs:element name="ValuesMedian" type="xs:double" minOccurs="0" maxOccurs="1"/>
			<xs:element name="ValuesMode" type="xs:double" minOccurs="0" maxOccurs="1"/>
			<xs:element name="ModePercentage" type="xs:double" minOccurs="0" maxOccurs="1"/>
			<xs:element name="ValuesStandardDeviation" type="xs:double" minOccurs="0" maxOccurs="1"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="FloatingPointConstantArray">
		<xs:annotation>
			<xs:documentation>Represents an array of double values where all values are identical. This an optimization for which an array of explicit double values is not required.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="eml:AbstractFloatingPointArray">
				<xs:sequence>
					<xs:element name="Value" type="xs:double" minOccurs="1" maxOccurs="1">
						<xs:annotation>
							<xs:documentation>Values inside all the elements of the array.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="Count" type="eml:PositiveLong" minOccurs="1" maxOccurs="1">
						<xs:annotation>
							<xs:documentation>Size of the array.</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="FloatingPointExternalArray">
		<xs:annotation>
			<xs:documentation>An array of double values provided explicitly by an HDF5 dataset.
By convention, the null value is NaN.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="eml:AbstractFloatingPointArray">
				<xs:sequence>
					<xs:element name="ArrayFloatingPointType" type="eml:FloatingPointType" minOccurs="1" maxOccurs="1"/>
					<xs:element name="CountPerValue" type="xs:long" minOccurs="1" maxOccurs="1" default="1"/>
					<xs:element name="Values" type="eml:ExternalDataArray" minOccurs="1" maxOccurs="1">
						<xs:annotation>
							<xs:documentation>Reference to an HDF5 array of doubles.</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="FloatingPointLatticeArray">
		<xs:annotation>
			<xs:documentation>Represents an array of doubles based on an origin and a multi-dimensional offset. The offset is based on a linearization of a multi-dimensional offset.

If count(i) is the number of elements in the dimension i and offset(i) is the offset in the dimension i, then:
globalOffsetInNDimension = startValue+ ni*offset(n) + n_1i*count(n)*offset(n-1) + .... + 0i*count(n)*count(n-1)*....count(1)*offset(0)</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="eml:AbstractFloatingPointArray">
				<xs:sequence>
					<xs:element name="StartValue" type="xs:double" minOccurs="1" maxOccurs="1">
						<xs:annotation>
							<xs:documentation>Value representing the global start for the lattice.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="Offset" type="eml:FloatingPointConstantArray" minOccurs="1" maxOccurs="unbounded"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="FloatingPointXmlArray">
		<xs:complexContent>
			<xs:extension base="eml:AbstractFloatingPointArray">
				<xs:sequence>
					<xs:element name="CountPerValue" type="xs:long" minOccurs="1" maxOccurs="1" default="1"/>
					<xs:element name="Values" type="eml:FloatingPointXmlArrayList" minOccurs="1" maxOccurs="1"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="GaugePressureInterval">
		<xs:complexContent>
			<xs:extension base="eml:AbstractPressureInterval">
				<xs:sequence>
					<xs:element name="MinPressure" type="eml:GaugePressure" minOccurs="1" maxOccurs="1"/>
					<xs:element name="MaxPressure" type="eml:GaugePressure" minOccurs="1" maxOccurs="1"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="GenericMeasure">
		<xs:annotation>
			<xs:documentation>A generic measure type.
This should not be used except in situations where the underlying class of data is 
captured elsewhere. For example, for a log curve.</xs:documentation>
		</xs:annotation>
		<xs:simpleContent>
			<xs:extension base="eml:AbstractMeasure">
				<xs:attribute name="uom" use="required" type="eml:UomEnum"/>
			</xs:extension>
		</xs:simpleContent>
	</xs:complexType>
	<xs:complexType name="IntegerArrayFromBooleanMaskArray">
		<xs:annotation>
			<xs:documentation>One-dimensional array of integer values obtained from the true elements of the Boolean mask.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="eml:AbstractIntegerArray">
				<xs:sequence>
					<xs:element name="CountPerValue" type="xs:long" minOccurs="1" maxOccurs="1" default="1"/>
					<xs:element name="Mask" type="eml:AbstractBooleanArray" minOccurs="1" maxOccurs="1">
						<xs:annotation>
							<xs:documentation>Boolean mask. A true element indicates that the index is included on the list of integer values.</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="IntegerArrayStatistics">
		<xs:sequence>
			<xs:element name="ValidValueCount" type="xs:long" minOccurs="0" maxOccurs="1"/>
			<xs:element name="MinimumValue" type="xs:long" minOccurs="0" maxOccurs="1"/>
			<xs:element name="MaximumValue" type="xs:long" minOccurs="0" maxOccurs="1"/>
			<xs:element name="ValuesMedian" type="xs:long" minOccurs="0" maxOccurs="1"/>
			<xs:element name="ValuesMode" type="xs:long" minOccurs="0" maxOccurs="1"/>
			<xs:element name="ModePercentage" type="xs:double" minOccurs="0" maxOccurs="1"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="IntegerConstantArray">
		<xs:annotation>
			<xs:documentation>Represents an array of integer values where all values are identical. This an optimization for which an array of explicit integer values is not required.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="eml:AbstractIntegerArray">
				<xs:sequence>
					<xs:element name="Value" type="xs:long" minOccurs="1" maxOccurs="1">
						<xs:annotation>
							<xs:documentation>Values inside all the elements of the array.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="Count" type="eml:PositiveLong" minOccurs="1" maxOccurs="1">
						<xs:annotation>
							<xs:documentation>Size of the array.</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="IntegerExternalArray">
		<xs:annotation>
			<xs:documentation>Array of integer values provided explicitly by an HDF5 dataset. The null value must be  explicitly provided in the NullValue attribute of this class.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="eml:AbstractIntegerArray">
				<xs:sequence>
					<xs:element name="ArrayIntegerType" type="eml:IntegerType" minOccurs="1" maxOccurs="1"/>
					<xs:element name="NullValue" type="xs:long" minOccurs="1" maxOccurs="1"/>
					<xs:element name="CountPerValue" type="xs:long" minOccurs="1" maxOccurs="1" default="1"/>
					<xs:element name="Values" type="eml:ExternalDataArray" minOccurs="1" maxOccurs="1">
						<xs:annotation>
							<xs:documentation>Reference to an HDF5 array of integers or doubles.</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="IntegerLatticeArray">
		<xs:annotation>
			<xs:documentation>Represents an array of integers based on an origin and a multi-dimensional offset. The offset is based on a linearization of a multi-dimensional offset.

If count(i) is the number of elements in the dimension i and offset(i) is the offset in the dimension i, then:
globalOffsetInNDimension = startValue+ ni*offset(n) + n_1i*count(n)*offset(n-1) + .... + 0i*count(n)*count(n-1)*....count(1)*offset(0)</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="eml:AbstractIntegerArray">
				<xs:sequence>
					<xs:element name="StartValue" type="xs:long" minOccurs="1" maxOccurs="1">
						<xs:annotation>
							<xs:documentation>Value representing the global start for the lattice:
i.e., iStart + jStart*ni + kStart*ni*nj</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="Offset" type="eml:IntegerConstantArray" minOccurs="1" maxOccurs="unbounded"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="IntegerXmlArray">
		<xs:complexContent>
			<xs:extension base="eml:AbstractIntegerArray">
				<xs:sequence>
					<xs:element name="CountPerValue" type="xs:long" minOccurs="1" maxOccurs="1" default="1"/>
					<xs:element name="NullValue" type="xs:long" minOccurs="1" maxOccurs="1"/>
					<xs:element name="Values" type="eml:IntegerXmlArrayList" minOccurs="1" maxOccurs="1"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="JaggedArray">
		<xs:annotation>
			<xs:documentation>Data storage object for an array of variable length 1D sub-arrays. The jagged array object consists of these two arrays: 
	- An aggregation of all the variable length sub-arrays into a single 1D array.   
	- The offsets into the single 1D array, given by the sum of all the sub-array lengths up to and including the current sub-array.  
Often referred to as a "list-of-lists" or "array-of-arrays" construction.

For example to store the following three arrays as a jagged array:
(a b c)
(d e f g)
(h)
Elements = (a b c d e f g h)
Cumulative Length = (3 7 8)</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="Elements" type="eml:AbstractValueArray" minOccurs="1" maxOccurs="1">
				<xs:annotation>
					<xs:documentation>1D array of elements containing the aggregation of individual array data.</xs:documentation>
				</xs:annotation>
			</xs:element>
			<xs:element name="CumulativeLength" type="eml:AbstractIntegerArray" minOccurs="1" maxOccurs="1">
				<xs:annotation>
					<xs:documentation>1D array of cumulative lengths to the end of the current sub-array. Each cumulative length is also equal to the index of the first element of the next sub-array, i.e., the index in the elements array for which the next variable length sub-array begins.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="MdInterval">
		<xs:complexContent>
			<xs:extension base="eml:AbstractInterval">
				<xs:sequence>
					<xs:element name="MdMin" type="xs:double" minOccurs="1" maxOccurs="1"/>
					<xs:element name="MdMax" type="xs:double" minOccurs="1" maxOccurs="1"/>
					<xs:element name="Uom" type="eml:LengthUomExt" minOccurs="1" maxOccurs="1"/>
					<xs:element name="Datum" type="eml:DataObjectReference" minOccurs="0" maxOccurs="1">
						<xs:annotation>
							<xs:documentation>The datum the MD interval is referenced to. Required when there is no default MD datum associated with the data object this is used in.</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="MeasuredDepth">
		<xs:annotation>
			<xs:documentation>A measured depth coordinate in a wellbore. Positive moving from the reference datum toward the bottomhole. All coordinates with the same datum (and same UOM) can be considered to be in the same coordinate reference system (CRS) and are thus directly comparable.</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:element name="MeasuredDepth" type="eml:LengthMeasureExt" minOccurs="1" maxOccurs="1"/>
			<xs:element name="Datum" type="eml:DataObjectReference" minOccurs="0" maxOccurs="1">
				<xs:annotation>
					<xs:documentation>The datum the measured depth is referenced to. Required when there is no default MD datum associated with the data object this is used in.</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="ReferencePointElevation">
		<xs:complexContent>
			<xs:extension base="eml:AbstractElevation">
				<xs:sequence>
					<xs:element name="ReferencePoint" type="eml:DataObjectReference" minOccurs="1" maxOccurs="1"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="ReferencePointTvdInterval">
		<xs:complexContent>
			<xs:extension base="eml:AbstractTvdInterval">
				<xs:sequence>
					<xs:element name="ReferencePoint" type="eml:DataObjectReference" minOccurs="1" maxOccurs="1"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="ReferencePointVerticalDepth">
		<xs:complexContent>
			<xs:extension base="eml:AbstractVerticalDepth">
				<xs:sequence>
					<xs:element name="ReferencePoint" type="eml:DataObjectReference" minOccurs="1" maxOccurs="1"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="RelativePressureInterval">
		<xs:complexContent>
			<xs:extension base="eml:AbstractPressureInterval">
				<xs:sequence>
					<xs:element name="MinPressure" type="eml:RelativePressure" minOccurs="1" maxOccurs="1"/>
					<xs:element name="MaxPressure" type="eml:RelativePressure" minOccurs="1" maxOccurs="1"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="ScalarInterval">
		<xs:complexContent>
			<xs:extension base="eml:AbstractInterval">
				<xs:sequence>
					<xs:element name="MinValue" type="eml:GenericMeasure" minOccurs="1" maxOccurs="1"/>
					<xs:element name="MaxValue" type="eml:GenericMeasure" minOccurs="1" maxOccurs="1"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="StringArrayStatistics">
		<xs:sequence>
			<xs:element name="ModePercentage" type="xs:double" minOccurs="0" maxOccurs="1"/>
			<xs:element name="ValuesMode" type="xs:string" minOccurs="0" maxOccurs="1"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="StringConstantArray">
		<xs:annotation>
			<xs:documentation>Represents an array of Boolean values where all values are identical. This an optimization for which an array of explicit Boolean values is not required. </xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="eml:AbstractStringArray">
				<xs:sequence>
					<xs:element name="Value" type="eml:String2000" minOccurs="1" maxOccurs="1">
						<xs:annotation>
							<xs:documentation>Value inside all the elements of the array.</xs:documentation>
						</xs:annotation>
					</xs:element>
					<xs:element name="Count" type="eml:PositiveLong" minOccurs="1" maxOccurs="1">
						<xs:annotation>
							<xs:documentation>Size of the array.</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="StringExternalArray">
		<xs:annotation>
			<xs:documentation>Used to store explicit string values, i.e., values that are not double, boolean or integers. The datatype of the values will be identified by means of the HDF5 API.</xs:documentation>
		</xs:annotation>
		<xs:complexContent>
			<xs:extension base="eml:AbstractStringArray">
				<xs:sequence>
					<xs:element name="CountPerValue" type="xs:long" minOccurs="1" maxOccurs="1" default="1"/>
					<xs:element name="Values" type="eml:ExternalDataArray" minOccurs="1" maxOccurs="1">
						<xs:annotation>
							<xs:documentation>Reference to HDF5 array of integer or double</xs:documentation>
						</xs:annotation>
					</xs:element>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="StringMeasure">
		<xs:simpleContent>
			<xs:extension base="eml:String2000">
				<xs:attribute name="uom" use="optional" type="eml:UnitOfMeasureExt"/>
			</xs:extension>
		</xs:simpleContent>
	</xs:complexType>
	<xs:complexType name="StringXmlArray">
		<xs:complexContent>
			<xs:extension base="eml:AbstractStringArray">
				<xs:sequence>
					<xs:element name="CountPerValue" type="xs:long" minOccurs="1" maxOccurs="1" default="1"/>
					<xs:element name="Values" type="xs:string" minOccurs="1" maxOccurs="unbounded"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
	<xs:complexType name="TemperatureInterval">
		<xs:complexContent>
			<xs:extension base="eml:AbstractInterval">
				<xs:sequence>
					<xs:element name="MinTemperature" type="eml:ThermodynamicTemperatureMeasureExt" minOccurs="1" maxOccurs="1"/>
					<xs:element name="MaxTemperature" type="eml:ThermodynamicTemperatureMeasureExt" minOccurs="1" maxOccurs="1"/>
				</xs:sequence>
			</xs:extension>
		</xs:complexContent>
	</xs:complexType>
</xs:schema>
